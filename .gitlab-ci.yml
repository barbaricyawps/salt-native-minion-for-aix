
---
stages:
  - lint
  - build
  - pkg_bff
##  - upload
##  - release


##  building trial version of CI here which should eventually move to utilize
## ci-templates.  Trying here first allows for issues to be worked out without
## having to handle two different branches

variables:
  PLUGIN_PACKAGES: "*.tar.gz"
  CICD_UPSTREAM_PATH: "saltstack/open/salt-native-minion-aix"
  CICD_JFROG_BLOB_PATTERN: "salt-*.tar.gz"
  CICD_JFROG_BLOB_REPO: ""
  CICD_JFROG_BLOB_TAG_REPO: ""
  CICD_JFROG_BLOG_REPO_PATH: ""
  CICD_SALT_VERSION:  "3005"
  CICD_SALT_RELEASE:  "1"
  CICD_SALT_DATE: "Thu Jan 1 1970"
  CICD_SALT_LOCATION: "salt"
  CICD_SALT_DEV_BRANCH: "master"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID == null

## include:
##   # upload jobs
##   - project: "saltstack/pop/cicd/ci-templates"
##     file: "/upload/upload_blob_jfrog.yml"
##   # release jobs
##   - project: "saltstack/pop/cicd/ci-templates"
##     file: "/release/release_blob.yml"


default:
  before_script:
    - mkdir /root/ || true
    - echo "machine artifactory.saltstack.net login $ARTIFACTORY_USERNAME password $ARTIFACTORY_API_TOKEN" > ~/.netrc
    - echo "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" >> ~/.netrc
    ## IBM machines might not come with mkinstallp by default, if not, install it
    - if [[ -z $(which mkinstall) ]]; then installp -ac -d /cecc/repos/aix71/TL5/BASE/installp/ppc/bos.adt.other -F bos.adt.insttools; fi


build-aix64-71:
  stage: build
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - /dist/run
    expire_in: 120 days
    reports:
      dotenv: build.env
  tags:
    - aix71
  script:
    # assumes running as root
    - sudo su
    - bash
    - export freeware="/opt/freeware"
    - export PATH="${freeware}/bin:${PATH}"
    - export AIX_VERSION=$(uname -v)
    - export AIX_RELEASE=$(uname -r)
    - echo "AIX_VERSION=${AIX_VERSION}" > build.env
    - echo "AIX_RELEASE=${AIX_RELEASE}" >> build.env
    - export GEN_IBM_VER_STRING=$(./obtain_verstring "${CICD_SALT_VERSION}")
    - echo "GEN_IBM_VER_STRING=${GEN_IBM_VER_STRING}" >> build.env
    - if [[ -z ${HOME} ]]; then export HOME='/'; export HOMEDIR_PREFIX=''; elif [[ ${HOME} = '/' ]]; then export HOMEDIR_PREFIX=''; else export HOMEDIR_PREFIX="${HOME}"; fi
    - echo "HOME_PREFIX=${HOME_PREFIX}" >> build.env
    - echo "HOME=${HOME}" >> build.env
    - rm -f ${HOMEDIR_PREFIX}/.rpmmacros
    # setup environment varsP
    # CECC ensure disk spaces adequate
    - chfs -a size=9G /usr
    - chfs -a size=5G /
    - chfs -a size=15G /home
    - chfs -a size=4G /var
    - chfs -a size=3G /tmp
    - chfs -a size=8G /opt
    # CECC boxes come with yum installed, then install python3 from AIX Toolbox
    ## - yum -y install python3 python3-devel python3-tools python3-traceback2 python3-test python3-docs
    ## - yum -y install binutils
    ## - yum -y install libffi libffi-devel
    ## - yum -y install python3-cffi python3-cryptography
    ## - yum -y install python3-sphinx bash-completion ca-certificates
    ## - yum -y install python3-mock python3-pytest
    ## - yum -y install python3-cheroot
    ## - yum -y install zlib-devel
    ## - yum -y install jq
    ## - yum -y install zeromq zeromq-devel python3-pyzmq
    ## - yum -y install coreutils
    - yum -y install binutils
    - yum -y install libffi libffi-devel
    - yum -y install zlib-devel
    - yum -y install jq
    - yum -y install zeromq zeromq-devel
    - yum -y install coreutils
    - yum -y install bash-completion
    - yum -y install python3.9 python3.9-devel python3.9-test
    - python3.9 -m pip install wheel
    - python3.9 -m pip install cffi==1.13.2
    - python3.9 -m pip install cheroot==8.2.1
    ## - python3.9 -m pip install cryptography==3.4.7
    - python3.9 -m pip install cryptography==3.1.1
    - python3.9 -m pip install docs==3.7.12
    - python3.9 -m pip install mock==3.0.5
    - python3.9 -m pip install pytest==5.3.1
    - python3.9 -m pip install pyzmq==18.1.1
    - python3.9 -m pip install sphinx==2.3.0
    - python3.9 -m pip install traceback2==1.4.0
    - export CICD_SALT_DATE=$(date +"%a %b %0d %Y")
    ## PyInstaller bootloader for AIX
    ## see https://pyinstaller.readthedocs.io/en/stable/bootloader-building.html#building-for-aix
    ## ensure empty environment
    - rm -fR ${oldpwd}/dev_pyinstaller
    - mkdir -p ${oldpwd}/dev_pyinstaller
    - cd ${oldpwd}/dev_pyinstaller
    ## - git clone -b v4.0 https://github.com/pyinstaller/pyinstaller.git
    - git clone -b v5.1 https://github.com/pyinstaller/pyinstaller.git
    ## could not get it or waf to work well, so simple solution of 2-3 days of trying, create a dummy executable /opt/freeware/bin/strip file which does nothing
    - echo '#!/opt/freeware/bin/bash' > ${freeware}/bin/strip
    - echo "# dummy" >> ${freeware}/bin/strip
    - chmod 755 ${freeware}/bin/strip
    - cd pyinstaller/bootloader
    - python3 ./waf configure --no-lsb all --target-arch=64bit
    - cd ..
    - export PYINSTALLER_DIR=$(pwd)
    - sudo python3 setup.py install
    - cd ${oldpwd}
    - python3.9 -m pip install "tiamat>=7.10.6"
    ## - if [[ ${HOME} = '/' ]]; then cp -f ${oldpwd}/gen_inst_template ${HOME}; cp -f ${oldpwd}/install_salt.sh ${HOME}; cp -f ${oldpwd}/salt_fqdns_grains.patch ${HOME}; fi
    ## need to include zeromq and zeromq-devel that are available from IBM and include the binary
    ## once that is done, then can pip3 install pyzmq from PyPI, decided to use pyzmq packaged version
    ## - export HOME="/" HOME should already be /
    - oldpwd=$(pwd)
    ## IBM machines might not come with mkinstallp by default, if not, install it
    # allow for use on AIX 7.1 TL5 or AIX 7.2 TL4 (current build offering)
    - export AIX_VFLAG="-D_AIX71"
    - export AIX_TL_LEVEL=$(oslevel -rq | head -n 1 | cut -d '-' -f 2 | sed s/0//)
    - if [[ -z $(command -v mkinstall) ]]; then installp -ac -d "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" -F bos.adt.insttools; fi

    # allow for use on AIX 7.1 TL5 or AIX 7.2 TL4 (current build offering)
    - export AIX_VFLAG="-D_AIX71"
    - export AIX_TL_LEVEL=$(oslevel -r | head -n 1 | cut -d '-' -f 2 | sed s/0//)
    - if [[ "2" = "${AIX_RELEASE}" ]]; then AIX_VFLAG="-D_AIX71 -D_AIX72"; fi
    - if [[ "3" = "${AIX_RELEASE}" ]]; then AIX_VFLAG="-D_AIX71 -D_AIX72 -D_AIX73"; fi
    ## IBM machines might not come with mkinstallp by default, if not, install it
    ## on AIX v7.2 TL5 it is exists in TL4 - wonder whats up with IBM
    ## the following taken from test_bld_next script, adjust there and c&p here
    - if [[ -z $(command -v mkinstallp) ]]; then if [[ -f "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" ]]; then installp -ac -d "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" -F bos.adt.insttools; else if  [[ "2" = "${AIX_RELEASE}" && -f "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" ]]; then installp -ac -d "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" -F bos.adt.insttools; elif  [[ "3" = "${AIX_RELEASE}" && -f "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" ]]; then installp -ac -d "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" -F bos.adt.insttools; else echo "cannot find fileset /cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other to install mkinstallp"; echo "check other TL levels to see if it exists"; exit 1; fi fi fi
    - export SALT_REL_INSTALLPATH="opt/saltstack/salt"
    - export OBJECT_MODE=64
    ## don't do this, it messes up picking __sync_synchronize
    ## export CC=gcc
    ## -mminimal-toc causing issues with cffi
    - export CFLAGS="-maix64 -g -DSYSV -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51 -D_AIX61 ${AIX_VFLAG} -D_ALL_SOURCE -DFUNCPROTO=15 -O2 -I/include"
    ## don't do this, it messes up picking __sync_synchronize
    ## export CXX=g++
    - export CXXFLAGS="${CFLAGS} -fthreadsafe-statics"
    - export F77=g77
    - export FFLAGS="-O -I/opt/freeware/include"
    - export LD=ld
    - export LDFLAGS="-L$freeware/lib -Wl,-blibpath:$freeware/lib:/usr/lib:/lib -Wl,-bmaxdata:0x80000000"
    - export LANG="en_US.UTF-8"
    - export LC_ALL="en_US.UTF-8"
    - export HOMEDIR_PREFIX=$(get_homedir_prefix)
    - echo "HOME=${HOME}" >> build.env
    - echo "HOMEDIR_PREFIX=${HOMEDIR_PREFIX}" >> build.env
    - echo "freeware=${freeware}" >> build.env
    - echo "PATH=${PATH}" >> build.env
    - echo "SALT_REL_INSTALLPATH=${SALT_REL_INSTALLPATH}" >> build.env
    - echo "OBJECT_MODE=${OBJECT_MODE}" >> build.env
    ## - echo "CC=${CC}" >> build.env
    - echo "CFLAGS=${CFLAGS}" >> build.env
    ## - echo "CXX=${CXX}" >> build.env
    - echo "CXXFLAGS=${CXXFLAGS}" >> build.env
    - echo "F77=${F77}" >> build.env
    - echo "FFLAGS=${FFLAGS}" >> build.env
    - echo "LD=${LD}" >> build.env
    - echo "LDFLAGS=${LDFLAGS}" >> build.env
    - echo "LANG=${LANG}" >> build.env
    - echo "LC_ALL=${LC_ALL}" >> build.env
    ## yum -y install python3-pyyaml gave errors due to cpio: rename -> PyYAML (already pip3 installed)
    ## python3 -m pip install PyYAML
    - python3 -m pip install --upgrade pip
    - python3 -m pip install setuptools
    - python3 -m pip install freezegun
    - python3 -m pip install pretend
    - python3 -m pip install scripttest
    - python3 -m pip install virtualenv
    - python3 -m pip install pop-config
    # A number of packages are not available for building  python3-pip, so these are pip3 installed
    - export CICD_SALT_DATE=$(date +"%a %b %0d %Y")
##    ## - python3 -m pip install "${CICD_SALT_LOCATION}"
##    - python3 -m pip install git+https://git@github.com/saltstack/salt@master#egg=salt
##    ## - python3 -m pip install git+https://github.com/saltstack/salt@master#egg=salt
##    ## need a better way to pick off the version, since salt might not install
##    - export CICD_SALT_VERSION=$(pip3 list --format=columns | grep salt | awk '{ print $2 }')
    - export CICD_SALT_LOCATION_NB="git+https://github.com/saltstack/salt@$CICD_SALT_DEV_BRANCH#egg=salt"
    - ulimit -c unlimited
    - ulimit -d unlimited
    - ulimit -m unlimited
    - ulimit -n unlimited
    - ulimit -s unlimited
    - ulimit -a
    - rm -fR dev_salt
    - mkdir dev_salt
    - cd dev_salt
    - git clone -q https://github.com/saltstack/salt.git
    - cd salt/salt/grains
    - /usr/bin/patch -i /salt_fqdns_grains.patch core.py
    - cd ${oldpwd}/dev_salt/salt
    - python3 setup.py -q sdist
    - cd dist
    - export CICD_SALT_VERSION=$(ls salt-*.tar.gz | sed s/salt-// | sed s/.tar.gz//)
    - cd ${oldpwd}
    - rm -f aix_requirements.txt
    - cp requirements.txt aix_requirements.txt
##    - sed -i -e 's&SALT_LOCATION&'${CICD_SALT_LOCATION_NB}'&' aix_requirements.txt
    - sed -i -e 's&SALT_LOCATION&'${oldpwd}/dev_salt/salt/dist/salt-${CICD_SALT_VERSION}.tar.gz'&' aix_requirements.txt
    - cat aix_requirements.txt
    - export CICD_SALT_VERSION_ADJ=$(echo "$CICD_SALT_VERSION" | sed "s/-/_/"g | sed "s/+/_/"g)
    - echo "CICD_SALT_VERSION_ADJ is $CICD_SALT_VERSION_ADJ"
    - echo "CICD_SALT_DATE=${CICD_SALT_DATE}" >> build.env
    - echo "CICD_SALT_VERSION=${CICD_SALT_VERSION}" >> build.env
    - echo "CICD_SALT_VERSION_ADJ=$CICD_SALT_VERSION_ADJ" >> build.env
    - echo "CICD_SALT_RELEASE=${CICD_SALT_RELEASE}" >> build.env
##    ## remove pip installed salt once we have the version
##    - pip3 uninstall -y salt
    ## Install tiamat
    ## IBM AIX Toolbox does not yet have <python3-pip>, so use <python3 -m pip> which is better anyway
    - python3 -m pip install "tiamat>=7.10.6"
    ## - python3 -m pip install git+https://git@gitlab.com/saltstack/pop/tiamat@master#egg=tiamat
    ## ran into issues running as root, but as cecuser no problem, need to ensure everything own'd right
    ## changed to assumming running as cecuser
    ## - chown -R cecuser:cecuser *
    ## - sudo - cecuser
    #
    # now build
    - sed -i 's&PYINSTALLER_LOCATION&'${PYINSTALLER_DIR}'&' build.conf
    - tiamat build.conf -c build.conf

  rules:
    - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
      when: always
    - when: never


build-aix64-72:
  stage: build
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - /dist/run
    expire_in: 120 days
    reports:
      dotenv: build.env
  tags:
    - aix72
  script:
    # assumes running as root
    - sudo su
    - bash
    - export freeware="/opt/freeware"
    - export PATH="${freeware}/bin:${PATH}"
    - export AIX_VERSION=$(uname -v)
    - export AIX_RELEASE=$(uname -r)
    - echo "AIX_VERSION=${AIX_VERSION}" > build.env
    - echo "AIX_RELEASE=${AIX_RELEASE}" > build.env
    # setup environment varsP
    # CECC ensure disk spaces adequate
    - chfs -a size=9G /usr
    - chfs -a size=5G /
    - chfs -a size=15G /home
    - chfs -a size=4G /var
    - chfs -a size=3G /tmp
    - chfs -a size=8G /opt
    # CECC boxes come with yum installed, then install python3 from AIX Toolbox
    - yum -y install python3 python3-devel python3-tools python3-traceback2 python3-test python3-docs
    - yum -y install binutils
    - yum -y install libffi libffi-devel
    - yum -y install python3-cffi python3-cryptography
    - yum -y install python3-sphinx bash-completion ca-certificates
    - yum -y install python3-mock python3-pytest
    - yum -y install python3-cheroot
    - yum -y install zlib-devel
    - yum -y install jq
    - yum -y install zeromq zeromq-devel python3-pyzmq
    - yum -y install coreutils
    ## need to include zeromq and zeromq-devel that are available from IBM and include the binary
    ## once that is done, then can pip3 install pyzmq from PyPI, decided to use pyzmq packaged version
    ## - export HOME="/" HOME should already be /
    - oldpwd=$(pwd)
    - export SALT_REL_INSTALLPATH="opt/saltstack/salt"
    ## IBM machines might not come with mkinstallp by default, if not, install it
    # allow for use on AIX 7.1 TL5 or AIX 7.2 TL4 (current build offering)
    - export AIX_VFLAG="-D_AIX71"
    - export AIX_TL_LEVEL=$(oslevel -rq | head -n 1 | cut -d '-' -f 2 | sed s/0//)
    - if [[ -z $(command -v mkinstall) ]]; then installp -ac -d "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" -F bos.adt.insttools; fi
    - export OBJECT_MODE=64
    ## don't do this, it messes up picking __sync_synchronize
    ## export CC=gcc
    ## -mminimal-toc causing issues with cffi
    ## export CFLAGS="-maix64 -g -mminimal-toc -DSYSV -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51 -D_AIX61 -D_AIX71 -D_ALL_SOURCE -DFUNCPROTO=15 -O2 -I/include -fthreadsafe-statics"
    - if [[ "2" = "${AIX_RELEASE}" ]]; then AIX_VFLAG="-D_AIX71 -D_AIX72"; fi
    - export CFLAGS="-maix64 -g -DSYSV -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51 -D_AIX61 ${AIX_VFLAG} -D_ALL_SOURCE -DFUNCPROTO=15 -O2 -I/include"
    ## don't do this, it messes up picking __sync_synchronize
    ## export CXX=g++
    - export CXXFLAGS="${CFLAGS} -fthreadsafe-statics"
    - export F77=g77
    - export FFLAGS="-O -I/opt/freeware/include"
    - export LD=ld
    - export LDFLAGS="-L$freeware/lib -Wl,-blibpath:$freeware/lib:/usr/lib:/lib -Wl,-bmaxdata:0x80000000"
    - export LANG="en_US.UTF-8"
    - export LC_ALL="en_US.UTF-8"
    - export HOMEDIR_PREFIX=$(get_homedir_prefix)
    - echo "HOME=${HOME}" >> build.env
    - echo "HOMEDIR_PREFIX=${HOMEDIR_PREFIX}" >> build.env
    - echo "freeware=${freeware}" >> build.env
    - echo "PATH=${PATH}" >> build.env
    - echo "SALT_REL_INSTALLPATH=${SALT_REL_INSTALLPATH}" >> build.env
    - echo "OBJECT_MODE=${OBJECT_MODE}" >> build.env
    ## - echo "CC=${CC}" >> build.env
    - echo "CFLAGS=${CFLAGS}" >> build.env
    ## - echo "CXX=${CXX}" >> build.env
    - echo "CXXFLAGS=${CXXFLAGS}" >> build.env
    - echo "F77=${F77}" >> build.env
    - echo "FFLAGS=${FFLAGS}" >> build.env
    - echo "LD=${LD}" >> build.env
    - echo "LDFLAGS=${LDFLAGS}" >> build.env
    - echo "LANG=${LANG}" >> build.env
    - echo "LC_ALL=${LC_ALL}" >> build.env
    ## yum -y install python3-pyyaml gave errors due to cpio: rename -> PyYAML (already pip3 installed)
    ## python3 -m pip install PyYAML
    - python3 -m pip install --upgrade pip
    - python3 -m pip install setuptools
    - python3 -m pip install wheel
    - python3 -m pip install freezegun
    - python3 -m pip install pretend
    - python3 -m pip install scripttest
    - python3 -m pip install virtualenv
    - python3 -m pip install pop-config==6.11.1
    # A number of packages are not available for building  python3-pip, so these are pip3 installed
    - export CICD_SALT_DATE=$(date +"%a %b %0d %Y")
##    ## - python3 -m pip install "${CICD_SALT_LOCATION}"
##    - python3 -m pip install git+https://git@github.com/saltstack/salt@master#egg=salt
##    ## - python3 -m pip install git+https://github.com/saltstack/salt@master#egg=salt
##    ## need a better way to pick off the version, since salt might not install
##    - export CICD_SALT_VERSION=$(pip3 list --format=columns | grep salt | awk '{ print $2 }')
    - export CICD_SALT_LOCATION_NB="git+https://github.com/saltstack/salt@$CICD_SALT_DEV_BRANCH#egg=salt"
    - ulimit -c unlimited
    - ulimit -d unlimited
    - ulimit -m unlimited
    - ulimit -n unlimited
    - ulimit -s unlimited
    - ulimit -a
    - rm -fR dev_salt
    - mkdir dev_salt
    - cd dev_salt
    - git clone -q https://github.com/saltstack/salt.git
    - cd salt/salt/grains
    - /usr/bin/patch -i /salt_fqdns_grains.patch core.py
    - cd ${oldpwd}/dev_salt/salt
    - python3 setup.py -q sdist
    - cd dist
    - export CICD_SALT_VERSION=$(ls salt-* | sed s/salt-// | sed s/.tar.gz//)
    - cd ${oldpwd}
    - rm -f aix_requirements.txt
    - cp requirements.txt aix_requirements.txt
##    - sed -i -e 's&SALT_LOCATION&'${CICD_SALT_LOCATION_NB}'&' aix_requirements.txt
    - sed -i -e 's&SALT_LOCATION&'${oldpwd}/dev_salt/salt/dist/salt-${CICD_SALT_VERSION}.tar.gz'&' aix_requirements.txt
    - cat aix_requirements.txt
    - export CICD_SALT_VERSION_ADJ=$(echo "$CICD_SALT_VERSION" | sed "s/-/_/"g | sed "s/+/_/"g)
    - echo "CICD_SALT_VERSION_ADJ is $CICD_SALT_VERSION_ADJ"
    - echo "CICD_SALT_DATE=${CICD_SALT_DATE}" >> build.env
    - echo "CICD_SALT_VERSION=${CICD_SALT_VERSION}" >> build.env
    - echo "CICD_SALT_VERSION_ADJ=$CICD_SALT_VERSION_ADJ" >> build.env
    - echo "CICD_SALT_RELEASE=${CICD_SALT_RELEASE}" >> build.env
##    ## remove pip installed salt once we have the version
##    - pip3 uninstall -y salt
    ## PyInstaller bootloader for AIX
    ## see https://pyinstaller.readthedocs.io/en/stable/bootloader-building.html#building-for-aix
    ## ensure empty environment
    - rm -fR ${oldpwd}/dev_pyinstaller
    - mkdir -p ${oldpwd}/dev_pyinstaller
    - cd ${oldpwd}/dev_pyinstaller
    ## - git clone -b v4.0 https://github.com/pyinstaller/pyinstaller.git
    - git clone -b v4.3 https://github.com/pyinstaller/pyinstaller.git
    ## could not get it or waf to work well, so simple solution of 2-3 days of trying, create a dummy executable /opt/freeware/bin/strip file which does nothing
    - echo '#!/opt/freeware/bin/bash' > ${freeware}/bin/strip
    - echo "# dummy" >> ${freeware}/bin/strip
    - chmod 755 ${freeware}/bin/strip
    - cd pyinstaller/bootloader
    - python3 ./waf configure --no-lsb all --target-arch=64bit
    - cd ..
    - export PYINSTALLER_DIR=$(pwd)
    - sudo python3 setup.py install
    - cd ${oldpwd}
    ## Install tiamat
    ## IBM AIX Toolbox does not yet have <python3-pip>, so use <python3 -m pip> which is better anyway
    - python3 -m pip install "tiamat>=7.10.6"
    ## - python3 -m pip install git+https://git@gitlab.com/saltstack/pop/tiamat@master#egg=tiamat
    ## ran into issues running as root, but as cecuser no problem, need to ensure everything own'd right
    ## changed to assumming running as cecuser
    ## - chown -R cecuser:cecuser *
    ## - sudo - cecuser
    #
    # now build
    - sed -i 's&PYINSTALLER_LOCATION&'${PYINSTALLER_DIR}'&' build.conf
    - tiamat build.conf -c build.conf

  rules:
    - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
      when: always
    - when: never


build-tags-aix64-71:
  stage: build
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - /dist/run
    expire_in: 120 days
    reports:
      dotenv: build.env
  tags:
    - aix71
  script:
    # assumes running as root
    - sudo su
    ## need to check if the bash is neccessary, CI might leave us in bash
    - bash
    - export AIX_VERSION=$(uname -v)
    - export AIX_RELEASE=$(uname -r)
    - echo "AIX_VERSION=${AIX_VERSION}" > build.env
    - echo "AIX_RELEASE=${AIX_RELEASE}" > build.env
    # setup environment vars
    # CECC ensure disk spaces adequate
    - chfs -a size=9G /usr
    - chfs -a size=5G /
    - chfs -a size=15G /home
    - chfs -a size=4G /var
    - chfs -a size=3G /tmp
    - chfs -a size=8G /opt
    # CECC boxes come with yum installed, then install python3 from AIX Toolbox
    - yum -y install python3 python3-devel python3-tools python3-traceback2 python3-test python3-docs
    - yum -y install binutils
    - yum -y install libffi libffi-devel
    - yum -y install python3-cffi python3-cryptography
    - yum -y install python3-sphinx bash-completion ca-certificates
    - yum -y install python3-mock python3-pytest
    - yum -y install python3-cheroot
    - yum -y install zlib-devel
    - yum -y install jq
    - yum -y install zeromq zeromq-devel python3-pyzmq
    - yum -y install coreutils
    ## need to include zeromq and zeromq-devel that are available from IBM and include the binary
    ## once that is done, then can pip3 install pyzmq from PyPI, decided to use pyzmq packaged version
    ## - export HOME="/" HOME should already be /
    - oldpwd=$(pwd)
    - export freeware="/opt/freeware"
    - export PATH="${freeware}/bin:${PATH}"
    - export SALT_REL_INSTALLPATH="opt/saltstack/salt"
    ## IBM machines might not come with mkinstallp by default, if not, install it
    # allow for use on AIX 7.1 TL5 or AIX 7.2 TL4 (current build offering)
    - export AIX_VFLAG="-D_AIX71"
    - export AIX_TL_LEVEL=$(oslevel -rq | head -n 1 | cut -d '-' -f 2 | sed s/0//)
    - if [[ -z $(command -v mkinstall) ]]; then installp -ac -d "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" -F bos.adt.insttools; fi
    - export OBJECT_MODE=64
    ## don't do this, it messes up picking __sync_synchronize
    ## export CC=gcc
    ## -mminimal-toc causing issues with cffi
    ## export CFLAGS="-maix64 -g -mminimal-toc -DSYSV -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51 -D_AIX61 -D_AIX71 -D_ALL_SOURCE -DFUNCPROTO=15 -O2 -I/include -fthreadsafe-statics"
    - if [[ "2" = "${AIX_RELEASE}" ]]; then AIX_VFLAG="-D_AIX71 -D_AIX72"; fi
    - export CFLAGS="-maix64 -g -DSYSV -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51 -D_AIX61 ${AIX_VFLAG} -D_ALL_SOURCE -DFUNCPROTO=15 -O2 -I/include"
    ## don't do this, it messes up picking __sync_synchronize
    ## export CXX=g++
    - export CXXFLAGS="${CFLAGS} -fthreadsafe-statics"
    - export F77=g77
    - export FFLAGS="-O -I/opt/freeware/include"
    - export LD=ld
    - export LDFLAGS="-L$freeware/lib -Wl,-blibpath:$freeware/lib:/usr/lib:/lib -Wl,-bmaxdata:0x80000000"
    - export LANG="en_US.UTF-8"
    - export LC_ALL="en_US.UTF-8"
    - echo "HOME=${HOME}" >> build.env
    - echo "freeware=${freeware}" >> build.env
    - echo "PATH=${PATH}" >> build.env
    - echo "SALT_REL_INSTALLPATH=${SALT_REL_INSTALLPATH}" >> build.env
    - echo "OBJECT_MODE=${OBJECT_MODE}" >> build.env
    ## - echo "CC=${CC}" >> build.env
    - echo "CFLAGS=${CFLAGS}" >> build.env
    ## - echo "CXX=${CXX}" >> build.env
    - echo "CXXFLAGS=${CXXFLAGS}" >> build.env
    - echo "F77=${F77}" >> build.env
    - echo "FFLAGS=${FFLAGS}" >> build.env
    - echo "LD=${LD}" >> build.env
    - echo "LDFLAGS=${LDFLAGS}" >> build.env
    - echo "LANG=${LANG}" >> build.env
    - echo "LC_ALL=${LC_ALL}" >> build.env
    ## yum -y install python3-pyyaml gave errors due to cpio: rename -> PyYAML (already pip3 installed)
    ## python3 -m pip install PyYAML
    - python3 -m pip install --upgrade pip
    - python3 -m pip install setuptools
    - python3 -m pip install wheel
    - python3 -m pip install freezegun
    - python3 -m pip install pretend
    - python3 -m pip install scripttest
    - python3 -m pip install virtualenv
    - python3 -m pip install pop-config==6.11.1
    # A number of packages are not available for building  python3-pip, so these are pip3 installed
    - export CICD_SALT_DATE=$(date +"%a %b %0d %Y")
##    - python3 -m pip install "${CICD_SALT_LOCATION}"
##    ## - python3 -m pip install git+https://git@github.com/saltstack/salt@master#egg=salt
##    ## - python3 -m pip install git+https://github.com/saltstack/salt@master#egg=salt
##    ## need a better way to pick off the version, since salt might not install
##    - export CICD_SALT_VERSION=$(pip3 list --format=columns | grep salt | awk '{ print $2 }')
##    - echo "CICD_SALT_DATE=${CICD_SALT_DATE}" >> build.env
##    - echo "CICD_SALT_VERSION=${CICD_SALT_VERSION}" >> build.env
##    - echo "CICD_SALT_RELEASE=${CICD_SALT_RELEASE}" >> build.env
##    ## remove pip installed salt once we have the version
##    - pip3 uninstall -y salt
    - export CICD_SALT_TAG=$(echo "${CI_COMMIT_TAG}" | cut -d '-' -f 1)
    - export CICD_SALT_VERSION=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 1)
    - export CICD_SALT_RELEASE=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 2)
    ## ensure if no release number given default to 1
    - if [[ "${CICD_SALT_VERSION}" = "${CICD_SALT_RELEASE}" ]]; then export CICD_SALT_RELEASE=1; fi
##    - export CICD_SALT_LOCATION="git+https://github.com/saltstack/salt@$CICD_SALT_TAG#egg=salt"
    - ulimit -c unlimited
    - ulimit -d unlimited
    - ulimit -m unlimited
    - ulimit -n unlimited
    - ulimit -s unlimited
    - ulimit -a
    - rm -fR dev_salt
    - mkdir dev_salt
    - cd dev_salt
    - git clone -b v${CICD_SALT_VERSION} https://github.com/saltstack/salt.git
    - cd salt/salt/grains
    - /usr/bin/patch -i /salt_fqdns_grains.patch core.py
    - cd ${oldpwd}/dev_salt/salt
    - python3 setup.py sdist
    - echo "$CICD_SALT_TAG"
    - echo "$CICD_SALT_VERSION"
    - echo "$CICD_SALT_RELEASE"
    - echo "$CICD_SALT_LOCATION"
    - cd ${oldpwd}
    - rm -f aix_requirements.txt
    - cp requirements.txt aix_requirements.txt
##    - sed -i 's&SALT_LOCATION&'"$CICD_SALT_LOCATION"'&' aix_requirements.txt
    - sed -i -e 's&SALT_LOCATION&'${oldpwd}/dev_salt/salt/dist/salt-${CICD_SALT_VERSION}.tar.gz'&' aix_requirements.txt
    - echo "CICD_SALT_DATE=$CICD_SALT_DATE" > build.env
    - echo "CICD_SALT_VERSION=$CICD_SALT_VERSION" >> build.env
    - echo "CICD_SALT_RELEASE=$CICD_SALT_RELEASE" >> build.env
    - cd ${oldpwd}
    ## PyInstaller bootloader for AIX
    ## see https://pyinstaller.readthedocs.io/en/stable/bootloader-building.html#building-for-aix
    ## ensure empty environment
    - rm -fR ${oldpwd}/dev_pyinstaller
    - mkdir -p ${oldpwd}/dev_pyinstaller
    - cd ${oldpwd}/dev_pyinstaller
    ## - git clone -b v4.0 https://github.com/pyinstaller/pyinstaller.git
    - git clone -b v4.3 https://github.com/pyinstaller/pyinstaller.git
    ## could not get it or waf to work well, so simple solution of 2-3 days of trying, create a dummy executable /opt/freeware/bin/strip file which does nothing
    - echo '#!/opt/freeware/bin/bash' > ${freeware}/bin/strip
    - echo "# dummy" >> ${freeware}/bin/strip
    - chmod 755 ${freeware}/bin/strip
    - cd pyinstaller/bootloader
    - python3 ./waf configure --no-lsb all --target-arch=64bit
    - cd ..
    - export PYINSTALLER_DIR=$(pwd)
    - sudo python3 setup.py install
    - cd ${oldpwd}/
    ## Install tiamat
    ## IBM AIX Toolbox does not yet have <python3-pip>, so use <python3 -m pip> which is better anyway
    - python3 -m pip install "tiamat>=7.10.6"
    ## - python3 -m pip install git+https://git@gitlab.com/saltstack/pop/tiamat@master#egg=tiamat
    ## ran into issues running as root, but as cecuser no problem, need to ensure everything own'd right
    ## changed to assumming running as cecuser
    ## - chown -R cecuser:cecuser *
    ## - sudo - cecuser
    - sed -i 's&PYINSTALLER_LOCATION&'${PYINSTALLER_DIR}'&' build.conf
    - tiamat build.conf -c build.conf

  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success


build-tags-aix64-72:
  stage: build
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - /dist/run
    expire_in: 120 days
    reports:
      dotenv: build.env
  tags:
    - aix72
  script:
    # assumes running as root
    - sudo su
    ## need to check if the bash is neccessary, CI might leave us in bash
    - bash
    - export AIX_VERSION=$(uname -v)
    - export AIX_RELEASE=$(uname -r)
    - echo "AIX_VERSION=${AIX_VERSION}" > build.env
    - echo "AIX_RELEASE=${AIX_RELEASE}" > build.env
    # setup environment vars
    # CECC ensure disk spaces adequate
    - chfs -a size=9G /usr
    - chfs -a size=5G /
    - chfs -a size=15G /home
    - chfs -a size=4G /var
    - chfs -a size=3G /tmp
    - chfs -a size=8G /opt
    # CECC boxes come with yum installed, then install python3 from AIX Toolbox
    - yum -y install python3 python3-devel python3-tools python3-traceback2 python3-test python3-docs
    - yum -y install binutils
    - yum -y install libffi libffi-devel
    - yum -y install python3-cffi python3-cryptography
    - yum -y install python3-sphinx bash-completion ca-certificates
    - yum -y install python3-mock python3-pytest
    - yum -y install python3-cheroot
    - yum -y install zlib-devel
    - yum -y install jq
    - yum -y install zeromq zeromq-devel python3-pyzmq
    - yum -y install coreutils
    ## need to include zeromq and zeromq-devel that are available from IBM and include the binary
    ## once that is done, then can pip3 install pyzmq from PyPI, decided to use pyzmq packaged version
    ## - export HOME="/" HOME should already be /
    - oldpwd=$(pwd)
    - export freeware="/opt/freeware"
    - export PATH="${freeware}/bin:${PATH}"
    - export SALT_REL_INSTALLPATH="opt/saltstack/salt"
    ## IBM machines might not come with mkinstallp by default, if not, install it
    # allow for use on AIX 7.1 TL5 or AIX 7.2 TL4 (current build offering)
    - export AIX_VFLAG="-D_AIX71"
    - export AIX_TL_LEVEL=$(oslevel -rq | head -n 1 | cut -d '-' -f 2 | sed s/0//)
    - if [[ -z $(command -v mkinstall) ]]; then installp -ac -d "/cecc/repos/aix${AIX_VERSION}${AIX_RELEASE}/TL${AIX_TL_LEVEL}/BASE/installp/ppc/bos.adt.other" -F bos.adt.insttools; fi
    - export OBJECT_MODE=64
    ## don't do this, it messes up picking __sync_synchronize
    ## export CC=gcc
    ## -mminimal-toc causing issues with cffi
    ## export CFLAGS="-maix64 -g -mminimal-toc -DSYSV -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51 -D_AIX61 -D_AIX71 -D_ALL_SOURCE -DFUNCPROTO=15 -O2 -I/include -fthreadsafe-statics"
    - if [[ "2" = "${AIX_RELEASE}" ]]; then AIX_VFLAG="-D_AIX71 -D_AIX72"; fi
    - export CFLAGS="-maix64 -g -DSYSV -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51 -D_AIX61 ${AIX_VFLAG} -D_ALL_SOURCE -DFUNCPROTO=15 -O2 -I/include"
    ## don't do this, it messes up picking __sync_synchronize
    ## export CXX=g++
    - export CXXFLAGS="${CFLAGS} -fthreadsafe-statics"
    - export F77=g77
    - export FFLAGS="-O -I/opt/freeware/include"
    - export LD=ld
    - export LDFLAGS="-L$freeware/lib -Wl,-blibpath:$freeware/lib:/usr/lib:/lib -Wl,-bmaxdata:0x80000000"
    - export LANG="en_US.UTF-8"
    - export LC_ALL="en_US.UTF-8"
    - echo "HOME=${HOME}" >> build.env
    - echo "freeware=${freeware}" >> build.env
    - echo "PATH=${PATH}" >> build.env
    - echo "SALT_REL_INSTALLPATH=${SALT_REL_INSTALLPATH}" >> build.env
    - echo "OBJECT_MODE=${OBJECT_MODE}" >> build.env
    ## - echo "CC=${CC}" >> build.env
    - echo "CFLAGS=${CFLAGS}" >> build.env
    ## - echo "CXX=${CXX}" >> build.env
    - echo "CXXFLAGS=${CXXFLAGS}" >> build.env
    - echo "F77=${F77}" >> build.env
    - echo "FFLAGS=${FFLAGS}" >> build.env
    - echo "LD=${LD}" >> build.env
    - echo "LDFLAGS=${LDFLAGS}" >> build.env
    - echo "LANG=${LANG}" >> build.env
    - echo "LC_ALL=${LC_ALL}" >> build.env
    ## yum -y install python3-pyyaml gave errors due to cpio: rename -> PyYAML (already pip3 installed)
    ## python3 -m pip install PyYAML
    - python3 -m pip install --upgrade pip
    - python3 -m pip install setuptools
    - python3 -m pip install wheel
    - python3 -m pip install freezegun
    - python3 -m pip install pretend
    - python3 -m pip install scripttest
    - python3 -m pip install virtualenv
    - python3 -m pip install pop-config
    # A number of packages are not available for building  python3-pip, so these are pip3 installed
    - export CICD_SALT_DATE=$(date +"%a %b %0d %Y")
##    - python3 -m pip install "${CICD_SALT_LOCATION}"
##    ## - python3 -m pip install git+https://git@github.com/saltstack/salt@master#egg=salt
##    ## - python3 -m pip install git+https://github.com/saltstack/salt@master#egg=salt
##    ## need a better way to pick off the version, since salt might not install
##    - export CICD_SALT_VERSION=$(pip3 list --format=columns | grep salt | awk '{ print $2 }')
##    - echo "CICD_SALT_DATE=${CICD_SALT_DATE}" >> build.env
##    - echo "CICD_SALT_VERSION=${CICD_SALT_VERSION}" >> build.env
##    - echo "CICD_SALT_RELEASE=${CICD_SALT_RELEASE}" >> build.env
##    ## remove pip installed salt once we have the version
##    - pip3 uninstall -y salt
    - export CICD_SALT_TAG=$(echo "${CI_COMMIT_TAG}" | cut -d '-' -f 1)
    - export CICD_SALT_VERSION=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 1)
    - export CICD_SALT_RELEASE=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 2)
    ## ensure if no release number given default to 1
    - if [[ "${CICD_SALT_VERSION}" = "${CICD_SALT_RELEASE}" ]]; then export CICD_SALT_RELEASE=1; fi
##    - export CICD_SALT_LOCATION="git+https://github.com/saltstack/salt@$CICD_SALT_TAG#egg=salt"
    - ulimit -c unlimited
    - ulimit -d unlimited
    - ulimit -m unlimited
    - ulimit -n unlimited
    - ulimit -s unlimited
    - ulimit -a
    - rm -fR dev_salt
    - mkdir dev_salt
    - cd dev_salt
    - git clone -b v${CICD_SALT_VERSION} https://github.com/saltstack/salt.git
    - cd salt/salt/grains
    - /usr/bin/patch -i /salt_fqdns_grains.patch core.py
    - cd ${oldpwd}/dev_salt/salt
    - python3 setup.py sdist
    - echo "$CICD_SALT_TAG"
    - echo "$CICD_SALT_VERSION"
    - echo "$CICD_SALT_RELEASE"
    - echo "$CICD_SALT_LOCATION"
    - cd ${oldpwd}
    - rm -f aix_requirements.txt
    - cp requirements.txt aix_requirements.txt
##    - sed -i 's&SALT_LOCATION&'"$CICD_SALT_LOCATION"'&' aix_requirements.txt
    - sed -i -e 's&SALT_LOCATION&'${oldpwd}/dev_salt/salt/dist/salt-${CICD_SALT_VERSION}.tar.gz'&' aix_requirements.txt
    - echo "CICD_SALT_DATE=$CICD_SALT_DATE" > build.env
    - echo "CICD_SALT_VERSION=$CICD_SALT_VERSION" >> build.env
    - echo "CICD_SALT_RELEASE=$CICD_SALT_RELEASE" >> build.env
    - cd ${oldpwd}
    ## PyInstaller bootloader for AIX
    ## see https://pyinstaller.readthedocs.io/en/stable/bootloader-building.html#building-for-aix
    ## ensure empty environment
    - rm -fR ${oldpwd}/dev_pyinstaller
    - mkdir -p ${oldpwd}/dev_pyinstaller
    - cd ${oldpwd}/dev_pyinstaller
    ## - git clone -b v4.0 https://github.com/pyinstaller/pyinstaller.git
    - git clone -b v4.3 https://github.com/pyinstaller/pyinstaller.git
    ## could not get it or waf to work well, so simple solution of 2-3 days of trying, create a dummy executable /opt/freeware/bin/strip file which does nothing
    - echo '#!/opt/freeware/bin/bash' > ${freeware}/bin/strip
    - echo "# dummy" >> ${freeware}/bin/strip
    - chmod 755 ${freeware}/bin/strip
    - cd pyinstaller/bootloader
    - python3 ./waf configure --no-lsb all --target-arch=64bit
    - cd ..
    - export PYINSTALLER_DIR=$(pwd)
    - sudo python3 setup.py install
    - cd ${oldpwd}/
    ## Install tiamat
    ## IBM AIX Toolbox does not yet have <python3-pip>, so use <python3 -m pip> which is better anyway
    - python3 -m pip install "tiamat>=7.10.6"
    ## - python3 -m pip install git+https://git@gitlab.com/saltstack/pop/tiamat@master#egg=tiamat
    ## ran into issues running as root, but as cecuser no problem, need to ensure everything own'd right
    ## changed to assumming running as cecuser
    ## - chown -R cecuser:cecuser *
    ## - sudo - cecuser
    - sed -i 's&PYINSTALLER_LOCATION&'${PYINSTALLER_DIR}'&' build.conf
    - tiamat build.conf -c build.conf

  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success


pkg-bff-aix64-71:
  stage: pkg_bff
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - "/*.tar.gz"
    expire_in: 120 days
  needs:
    - job: build-aix64-71
  tags:
    - aix71
  script:
    # assumes running as root
    - sudo su
    ## build the rpm
    ## need to check if the bash is neccessary, CI might leave us in bash
    - bash
    - export freeware="/opt/freeware"
    - export PATH="${freeware}/bin:${PATH}"
    - if [[ ${HOME} = '/' ]]; then cp -f ${oldpwd}/gen_inst_template ${HOME}; cp -f ${oldpwd}/install_salt.sh ${HOME}; cp -f ${oldpwd}/salt_fqdns_grains.patch ${HOME}; fi
    - echo "%_topdir ${freeware}/rpmbuild" > ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_var    ${freeware}/var" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_initddir ${freeware}/etc/rc.d/init.d" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_date ${CICD_SALT_DATE}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_ver ${CICD_SALT_VERSION_ADJ}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_release ${CICD_SALT_RELEASE}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - cat ${HOMEDIR_PREFIX}/.rpmmacros
    - rm -fR ${freeware}/rpmbuild
    - mkdir -p ${freeware}/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
    - mkdir -p ${freeware}/var/tmp
    - cp -R rpm_files/SPECS/* ${freeware}/rpmbuild/SPECS/
    - cp -R rpm_files/SOURCES/* ${freeware}/rpmbuild/SOURCES/
    - cp -R dist/run ${freeware}/rpmbuild/SOURCES/
    - find ${freeware}/rpmbuild/SOURCES/ -name "__pycache__" | xargs rm -fR
    - find ${freeware}/rpmbuild/SOURCES/ -name "*.pyc" | xargs rm -f
    - find ${freeware}/rpmbuild/SOURCES/ -name "*.pyo" | xargs rm -f
    ## run into issues trying to build this here, works if root but attempting root fails :shrug:
    ## - sudo su
    ## Have to set locale to non-UTF8 as having en_US.UTF8 causes issues with rpmbuild
    - export LANG="en_US"
    - export LC_ALL="en_US"
    #ensure any previously installed salt is removed
    - yum -y erase salt-*
    ## - cp ${HOME}/.rpmmacros /.rpmmacros
    - cd /opt/freeware/rpmbuild
    - rpmbuild -v -ba ${freeware}/rpmbuild/SPECS/salt.spec
    - cd ${freeware}/rpmbuild/RPMS/ppc
    - yum -y install "salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}.aix${AIX_VERSION}.${AIX_RELEASE}.ppc.rpm"
    # now ready to build bff package as root.
    - cd ${HOME}
    - rm -fR ${HOMEDIR_PREFIX}/prep_rte_area
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}
    - cp -R /${SALT_REL_INSTALLPATH}/* ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/
    # copy over other system related files
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/usr/bin
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/etc/rc.d/init.d
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/logrotate.d
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/salt
    - cp -R ${freeware}/bin/salt-call ${HOMEDIR_PREFIX}/prep_rte_area/usr/bin/
    - cp -R ${freeware}/bin/salt-minion ${HOMEDIR_PREFIX}/prep_rte_area/usr/bin/
    - cp -R ${freeware}/etc/logrotate.d/salt ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/logrotate.d/
    - cp -R ${freeware}/etc/salt ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/
    - cp -R ${freeware}/etc/rc.d/init.d/salt-minion ${HOMEDIR_PREFIX}/prep_rte_area/etc/rc.d/init.d/
    - cp -R ${freeware}/etc/rc.d/init.d/salt-minion_src ${HOMEDIR_PREFIX}/prep_rte_area/etc/rc.d/init.d/
    - find ${HOMEDIR_PREFIX}/prep_rte_area -name "__pycache__" -print | xargs rm -fR
    - find ${HOMEDIR_PREFIX}/prep_rte_area -name "*.pyc" -print | xargs rm -f
    - find ${HOMEDIR_PREFIX}/prep_rte_area -name "*.pyo" -print | xargs rm -f
    # remove any names with spaces in them, AIX does not care for them
    - rm -f ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/run/setuptools/command/"launcher manifest.xml"
    - rm -f ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/run/setuptools/"script (dev).tmpl"
    # remember to remove any tmp and log files
    - rm -fR ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/var/tmp
    - rm -f *.log
    # ready to generate the template file to use with mkinstallp
    - cd ${HOME}
    ## Also gen_inst_template and mkinstallp have to be run as root to work correctly at the moment.
    - export version_string=$(./obtain_verstring "${CICD_SALT_VERSION_ADJ}")
    - sed -i 's&SALT_VERSION_STRING&'"$version_string"'&' ${HOMEDIR_PREFIX}/gen_inst_template
    - bash -x ${HOMEDIR_PREFIX}/gen_inst_template 2>&1 | tee ${HOMEDIR_PREFIX}/mygen
    - rm -f ${HOMEDIR_PREFIX}/salt.template
    - mv ${HOMEDIR_PREFIX}/prep_rte_area/salt.template ${HOMEDIR_PREFIX}/
    # the salt.template file to use with mkinstallp should be in ${HOME}/prep_rte_area
    # mkinstallp -d <abs path prep directory> -T <abs path to template>
    ## ran into issues with HOME expansion using sudo
    ## - sudo mkinstallp -d ${HOME}/prep_rte_area -T ${HOME}/salt.template 2>&1 | tee ${HOME}/myinstlp
    - mkinstallp -d ${HOMEDIR_PREFIX}/prep_rte_area -T ${HOMEDIR_PREFIX}/salt.template 2>&1 | tee ${HOMEDIR_PREFIX}/myinstlp
    # prepare delivery package
    - export salt_pkg="salt_${CICD_SALT_VERSION}"
    - rm -fR "${salt_pkg}"
    - rm -f "${salt_pkg}-${CICD_SALT_RELEASE}.tar"
    - rm -f "${salt_pkg}-${CICD_SALT_RELEASE}.tar.gz"
    - mkdir "${salt_pkg}"
    - cp ${HOMEDIR_PREFIX}/install_salt.sh ${HOMEDIR_PREFIX}/"${salt_pkg}"
    - cp ${HOMEDIR_PREFIX}/prep_rte_area/tmp/salt*.bff ${HOMEDIR_PREFIX}/"${salt_pkg}"
    - tar -cvf ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar" ./"${salt_pkg}"
    - gzip ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar"
    ## need to ensure access after working with root
    - chown -R cecuser:cecuser "${salt_pkg}-${CICD_SALT_RELEASE}.tar.gz"
    - mv "${salt_pkg}-${CICD_SALT_RELEASE}.tar.gz" ${oldpwd}/

  rules:
    - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
      when: always
    - when: never


pkg-bff-aix64-72:
  stage: pkg_bff
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - "/*.tar.gz"
    expire_in: 120 days
  needs:
    - job: build-aix64-72
  tags:
    - aix72
  script:
    # assumes running as root
    - sudo su
    ## build the rpm
    ## need to check if the bash is neccessary, CI might leave us in bash
    - bash
    - echo "%_topdir ${freeware}/rpmbuild" > ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_var    ${freeware}/var" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_initddir ${freeware}/etc/rc.d/init.d" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_date ${CICD_SALT_DATE}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_ver ${CICD_SALT_VERSION_ADJ}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_release ${CICD_SALT_RELEASE}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - cat ${HOMEDIR_PREFIX}/.rpmmacros
    - rm -fR ${freeware}/rpmbuild
    - mkdir -p ${freeware}/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
    - mkdir -p ${freeware}/var/tmp
    - cp -a rpm_files/SPECS/* ${freeware}/rpmbuild/SPECS/
    - cp -a rpm_files/SOURCES/* ${freeware}/rpmbuild/SOURCES/
    - cp -a dist/run ${freeware}/rpmbuild/SOURCES/
    - find ${freeware}/rpmbuild/SOURCES/ -name "__pycache__" | xargs rm -fR
    - find ${freeware}/rpmbuild/SOURCES/ -name "*.pyc" | xargs rm -f
    - find ${freeware}/rpmbuild/SOURCES/ -name "*.pyo" | xargs rm -f
    ## run into issues trying to build this here, works if root but attempting root fails :shrug:
    ## - sudo su
    - export freeware="/opt/freeware"
    - export PATH="${freeware}/bin:${PATH}"
    - export LANG="en_US"
    - export LC_ALL="en_US"
    ## Have to set locale to non-UTF8 as having en_US.UTF8 causes issues with rpmbuild
    ## - cp ${HOME}/.rpmmacros /.rpmmacros
    - cd /opt/freeware/rpmbuild
    - rpmbuild -v -ba ${freeware}/rpmbuild/SPECS/salt.spec
    - cd ${freeware}/rpmbuild/RPMS/ppc
    - yum -y install "salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}.aix${AIX_VERSION}.${AIX_RELEASE}.ppc.rpm"
    # now ready to build bff package as root.
    - cd ${HOME}
    - rm -fR ${HOMEDIR_PREFIX}/prep_rte_area
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}
    - cp -a /${SALT_REL_INSTALLPATH}/* ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/
    # copy over other system related files
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/usr/bin
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/etc/rc.d/init.d
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/logrotate.d
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/salt
    - cp -a ${freeware}/bin/salt-call ${HOMEDIR_PREFIX}/prep_rte_area/usr/bin/
    - cp -a ${freeware}/bin/salt-minion ${HOMEDIR_PREFIX}/prep_rte_area/usr/bin/
    - cp -a ${freeware}/etc/logrotate.d/salt ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/logrotate.d/
    - cp -a ${freeware}/etc/salt ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/
    - cp -a ${freeware}/etc/rc.d/init.d/salt-minion ${HOMEDIR_PREFIX}/prep_rte_area/etc/rc.d/init.d/
    - cp -a ${freeware}/etc/rc.d/init.d/salt-minion_src ${HOMEDIR_PREFIX}/prep_rte_area/etc/rc.d/init.d/
    - find ${HOMEDIR_PREFIX}/prep_rte_area -name "__pycache__" -print | xargs rm -fR
    - find ${HOMEDIR_PREFIX}/prep_rte_area -name "*.pyc" -print | xargs rm -f
    - find ${HOMEDIR_PREFIX}/prep_rte_area -name "*.pyo" -print | xargs rm -f
    # remove any names with spaces in them, AIX does not care for them
    - rm -f ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/run/setuptools/command/"launcher manifest.xml"
    - rm -f ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/run/setuptools/"script (dev).tmpl"
    # remember to remove any tmp and log files
    - rm -fR ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/var/tmp
    - rm -f *.log
    # ready to generate the template file to use with mkinstallp
    - cd ${HOME}
    ## Also gen_inst_template and mkinstallp have to be run as root to work correctly at the moment.
    - export version_string=$(./obtain_verstring "${CICD_SALT_VERSION_ADJ}")
    - sed -i 's&SALT_VERSION_STRING&'"$version_string"'&' gen_inst_template
    - bash -x ${HOMEDIR_PREFIX}/gen_inst_template 2>&1 | tee ${HOMEDIR_PREFIX}/mygen
    - rm -f ${HOMEDIR_PREFIX}/salt.template
    - mv ${HOMEDIR_PREFIX}/prep_rte_area/salt.template ${HOMEDIR_PREFIX}/
    # the salt.template file to use with mkinstallp should be in ${HOME}/prep_rte_area
    # mkinstallp -d <abs path prep directory> -T <abs path to template>
    ## ran into issues with HOME expansion using sudo
    ## - sudo mkinstallp -d ${HOME}/prep_rte_area -T ${HOME}/salt.template 2>&1 | tee ${HOME}/myinstlp
    - mkinstallp -d ${HOMEDIR_PREFIX}/prep_rte_area -T ${HOMEDIR_PREFIX}/salt.template 2>&1 | tee ${HOMEDIR_PREFIX}/myinstlp
    # prepare delivery package
    - export salt_pkg="salt_${CICD_SALT_VERSION}"
    - rm -fR "${salt_pkg}"
    - rm -f "${salt_pkg}-${CICD_SALT_RELEASE}.tar"
    - rm -f "${salt_pkg}-${CICD_SALT_RELEASE}.tar.gz"
    - mkdir "${salt_pkg}"
    - cp ${HOMEDIR_PREFIX}/install_salt.sh ${HOMEDIR_PREFIX}/"${salt_pkg}"
    - cp ${HOMEDIR_PREFIX}/prep_rte_area/tmp/salt*.bff ${HOMEDIR_PREFIX}/"${salt_pkg}"
    - tar -cvf ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar" ./"${salt_pkg}"
    - gzip ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar"
    ## need to ensure access after working with root
    - mv ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar" ${oldpwd}/
    - chown -R cecuser:cecuser ${oldpwd}

  rules:
    - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
      when: always
    - when: never


pkg-tags-bff-aix64-71:
  stage: pkg_bff
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - "/*.tar.gz"
    expire_in: 120 days
  needs:
    - job: build-tags-aix64-71
  tags:
    - aix71
  script:
    # assumes running as root
    - sudo su
    ## build the rpm
    - bash
    - echo "%_topdir ${freeware}/rpmbuild" > ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_var    ${freeware}/var" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_initddir ${freeware}/etc/rc.d/init.d" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_date ${CICD_SALT_DATE}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_ver ${CICD_SALT_VERSION}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_release ${CICD_SALT_RELEASE}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - cat ${HOMEDIR_PREFIX}/.rpmmacros
    - rm -fR ${freeware}/rpmbuild
    - mkdir -p ${freeware}/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
    - mkdir -p ${freeware}/var/tmp
    - cp -a rpm_files/SPECS/* ${freeware}/rpmbuild/SPECS/
    - cp -a rpm_files/SOURCES/* ${freeware}/rpmbuild/SOURCES/
    - cp -a dist/run ${freeware}/rpmbuild/SOURCES/
    - find ${freeware}/rpmbuild/SOURCES/ -name "__pycache__" | xargs rm -fR
    - find ${freeware}/rpmbuild/SOURCES/ -name "*.pyc" | xargs rm -f
    - find ${freeware}/rpmbuild/SOURCES/ -name "*.pyo" | xargs rm -f
    ## run into issues trying to build this here, works if root but attempting root fails :shrug:
    ## - sudo su
    - export freeware="/opt/freeware"
    - export PATH="${freeware}/bin:${PATH}"
    - export LANG="en_US"
    - export LC_ALL="en_US"
    ## Have to set locale to non-UTF8 as having en_US.UTF8 causes issues with rpmbuild
    ## - cp ${HOME}/.rpmmacros /.rpmmacros
    - cd /opt/freeware/rpmbuild
    - rpmbuild -v -ba ${freeware}/rpmbuild/SPECS/salt.spec
    - cd ${freeware}/rpmbuild/RPMS/ppc
    - yum -y install "salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}.aix${AIX_VERSION}.${AIX_RELEASE}.ppc.rpm"
    # now ready to build bff package as root.
    - cd ${HOME}
    - rm -fR ${HOMEDIR_PREFIX}/prep_rte_area
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}
    - cp -a /${SALT_REL_INSTALLPATH}/* ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/
    # copy over other system related files
    - mkdir -p ${HOMEDIR_PREFIX/gc}/prep_rte_area/usr/bin
    - mkdir -p ${HOMEDIR_PREFIX/gc}/prep_rte_area/etc/rc.d/init.d
    - mkdir -p ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/logrotate.d
    - mkdir -p ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/salt
    - cp -a ${freeware}/bin/salt-call ${HOMEDIR_PREFIX/gc}/prep_rte_area/usr/bin/
    - cp -a ${freeware}/bin/salt-minion ${HOMEDIR_PREFIX/gc}/prep_rte_area/usr/bin/
    - cp -a ${freeware}/etc/logrotate.d/salt ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/logrotate.d/
    - cp -a ${freeware}/etc/salt ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/
    - cp -a ${freeware}/etc/rc.d/init.d/salt-minion ${HOMEDIR_PREFIX/gc}/prep_rte_area/etc/rc.d/init.d/
    - cp -a ${freeware}/etc/rc.d/init.d/salt-minion_src ${HOMEDIR_PREFIX/gc}/prep_rte_area/etc/rc.d/init.d/
    - find ${HOMEDIR_PREFIX/gc}/prep_rte_area -name "__pycache__" -print | xargs rm -fR
    - find ${HOMEDIR_PREFIX/gc}/prep_rte_area -name "*.pyc" -print | xargs rm -f
    - find ${HOMEDIR_PREFIX/gc}/prep_rte_area -name "*.pyc" -print | xargs rm -f
    # remove any names with spaces in them, AIX does not care for them
    - rm -f ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/run/setuptools/command/"launcher manifest.xml"
    - rm -f ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/run/setuptools/"script (dev).tmpl"
    # remember to remove any tmp and log files
    - rm -fR ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/var/tmp
    - rm -f *.log
    # ready to generate the template file to use with mkinstallp
    - cd ${HOME}
    ## Also gen_inst_template and mkinstallp have to be run as root to work correctly at the moment.
    - export version_string=$(./obtain_verstring "${CICD_SALT_VERSION}")
    - sed -i 's&SALT_VERSION_STRING&'"$version_string"'&' gen_inst_template
    - bash -x ${HOMEDIR_PREFIX}/gen_inst_template 2>&1 | tee ${HOMEDIR_PREFIX}/mygen
    - rm -f ${HOMEDIR_PREFIX}/salt.template
    - mv ${HOMEDIR_PREFIX}/prep_rte_area/salt.template ${HOMEDIR_PREFIX}/
    # the salt.template file to use with mkinstallp should be in ${HOMEDIR_PREFIX}/prep_rte_area
    # mkinstallp -d <abs path prep directory> -T <abs path to template>
    ## ran into issues with HOME expansion using sudo
    ## - sudo mkinstallp -d ${HOME}/prep_rte_area -T ${HOME}/salt.template 2>&1 | tee ${HOME}/myinstlp
    - mkinstallp -d ${HOMEDIR_PREFIX}/prep_rte_area -T ${HOMEDIR_PREFIX}/salt.template 2>&1 | tee ${HOMEDIR_PREFIX}/myinstlp
    # prepare delivery package
    - export salt_pkg="salt_${CICD_SALT_VERSION}"
    - rm -fR "${salt_pkg}"
    - rm -f "${salt_pkg}-${CICD_SALT_RELEASE}.tar"
    - rm -f "${salt_pkg}-${CICD_SALT_RELEASE}.tar.gz"
    - mkdir "${salt_pkg}"
    - cp ${HOMEDIR_PREFIX}/install_salt.sh ${HOMEDIR_PREFIX}/"${salt_pkg}"
    - cp ${HOMEDIR_PREFIX}/prep_rte_area/tmp/salt*.bff ${HOMEDIR_PREFIX}/"${salt_pkg}"
    - tar -cvf ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar" ./"${salt_pkg}"
    - gzip ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar"
    ## need to ensure access after working with root
    - mv ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar" ${oldpwd}/
    - chown -R cecuser:cecuser ${oldpwd}

  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success


pkg-tags-bff-aix64-72:
  stage: pkg_bff
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - "/*.tar.gz"
    expire_in: 120 days
  needs:
    - job: build-tags-aix64-72
  tags:
    - aix72
  script:
    # assumes running as root
    - sudo su
    ## build the rpm
    - bash
    - echo "%_topdir ${freeware}/rpmbuild" > ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_var    ${freeware}/var" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_initddir ${freeware}/etc/rc.d/init.d" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_date ${CICD_SALT_DATE}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_ver ${CICD_SALT_VERSION}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - echo "%_salt_release ${CICD_SALT_RELEASE}" >> ${HOMEDIR_PREFIX}/.rpmmacros
    - cat ${HOMEDIR_PREFIX}/.rpmmacros
    - rm -fR ${freeware}/rpmbuild
    - mkdir -p ${freeware}/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
    - mkdir -p ${freeware}/var/tmp
    - cp -a rpm_files/SPECS/* ${freeware}/rpmbuild/SPECS/
    - cp -a rpm_files/SOURCES/* ${freeware}/rpmbuild/SOURCES/
    - cp -a dist/run ${freeware}/rpmbuild/SOURCES/
    - find ${freeware}/rpmbuild/SOURCES/ -name "__pycache__" | xargs rm -fR
    - find ${freeware}/rpmbuild/SOURCES/ -name "*.pyc" | xargs rm -f
    - find ${freeware}/rpmbuild/SOURCES/ -name "*.pyo" | xargs rm -f
    ## run into issues trying to build this here, works if root but attempting root fails :shrug:
    ## - sudo su
    - export freeware="/opt/freeware"
    - export PATH="${freeware}/bin:${PATH}"
    - export LANG="en_US"
    - export LC_ALL="en_US"
    ## Have to set locale to non-UTF8 as having en_US.UTF8 causes issues with rpmbuild
    ## - cp ${HOME}/.rpmmacros /.rpmmacros
    - cd /opt/freeware/rpmbuild
    - rpmbuild -v -ba ${freeware}/rpmbuild/SPECS/salt.spec
    - cd ${freeware}/rpmbuild/RPMS/ppc
    - yum -y install "salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}.aix${AIX_VERSION}.${AIX_RELEASE}.ppc.rpm"
    # now ready to build bff package as root.
    - cd ${HOME}
    - rm -fR ${HOMEDIR_PREFIX}/prep_rte_area
    - mkdir -p ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}
    - cp -a /${SALT_REL_INSTALLPATH}/* ${HOMEDIR_PREFIX}/prep_rte_area/${SALT_REL_INSTALLPATH}/
    # copy over other system related files
    - mkdir -p ${HOMEDIR_PREFIX/gc}/prep_rte_area/usr/bin
    - mkdir -p ${HOMEDIR_PREFIX/gc}/prep_rte_area/etc/rc.d/init.d
    - mkdir -p ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/logrotate.d
    - mkdir -p ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/salt
    - cp -a ${freeware}/bin/salt-call ${HOMEDIR_PREFIX/gc}/prep_rte_area/usr/bin/
    - cp -a ${freeware}/bin/salt-minion ${HOMEDIR_PREFIX/gc}/prep_rte_area/usr/bin/
    - cp -a ${freeware}/etc/logrotate.d/salt ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/logrotate.d/
    - cp -a ${freeware}/etc/salt ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/etc/
    - cp -a ${freeware}/etc/rc.d/init.d/salt-minion ${HOMEDIR_PREFIX/gc}/prep_rte_area/etc/rc.d/init.d/
    - cp -a ${freeware}/etc/rc.d/init.d/salt-minion_src ${HOMEDIR_PREFIX/gc}/prep_rte_area/etc/rc.d/init.d/
    - find ${HOMEDIR_PREFIX/gc}/prep_rte_area -name "__pycache__" -print | xargs rm -fR
    - find ${HOMEDIR_PREFIX/gc}/prep_rte_area -name "*.pyc" -print | xargs rm -f
    - find ${HOMEDIR_PREFIX/gc}/prep_rte_area -name "*.pyc" -print | xargs rm -f
    # remove any names with spaces in them, AIX does not care for them
    - rm -f ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/run/setuptools/command/"launcher manifest.xml"
    - rm -f ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/run/setuptools/"script (dev).tmpl"
    # remember to remove any tmp and log files
    - rm -fR ${HOMEDIR_PREFIX/gc}/prep_rte_area/${SALT_REL_INSTALLPATH}/var/tmp
    - rm -f *.log
    # ready to generate the template file to use with mkinstallp
    - cd ${HOME}
    ## Also gen_inst_template and mkinstallp have to be run as root to work correctly at the moment.
    - export version_string=$(./obtain_verstring "${CICD_SALT_VERSION}")
    - sed -i 's&SALT_VERSION_STRING&'"$version_string"'&' gen_inst_template
    - bash -x ${HOMEDIR_PREFIX}/gen_inst_template 2>&1 | tee ${HOMEDIR_PREFIX}/mygen
    - rm -f ${HOMEDIR_PREFIX}/salt.template
    - mv ${HOMEDIR_PREFIX}/prep_rte_area/salt.template ${HOMEDIR_PREFIX}/
    # the salt.template file to use with mkinstallp should be in ${HOMEDIR_PREFIX}/prep_rte_area
    # mkinstallp -d <abs path prep directory> -T <abs path to template>
    ## ran into issues with HOME expansion using sudo
    ## - sudo mkinstallp -d ${HOME}/prep_rte_area -T ${HOME}/salt.template 2>&1 | tee ${HOME}/myinstlp
    - mkinstallp -d ${HOMEDIR_PREFIX}/prep_rte_area -T ${HOMEDIR_PREFIX}/salt.template 2>&1 | tee ${HOMEDIR_PREFIX}/myinstlp
    # prepare delivery package
    - export salt_pkg="salt_${CICD_SALT_VERSION}"
    - rm -fR "${salt_pkg}"
    - rm -f "${salt_pkg}-${CICD_SALT_RELEASE}.tar"
    - rm -f "${salt_pkg}-${CICD_SALT_RELEASE}.tar.gz"
    - mkdir "${salt_pkg}"
    - cp ${HOMEDIR_PREFIX}/install_salt.sh ${HOMEDIR_PREFIX}/"${salt_pkg}"
    - cp ${HOMEDIR_PREFIX}/prep_rte_area/tmp/salt*.bff ${HOMEDIR_PREFIX}/"${salt_pkg}"
    - tar -cvf ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar" ./"${salt_pkg}"
    - gzip ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar"
    ## need to ensure access after working with root
    - mv ./"${salt_pkg}-${CICD_SALT_RELEASE}.tar" ${oldpwd}/
    - chown -R cecuser:cecuser ${oldpwd}

  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
